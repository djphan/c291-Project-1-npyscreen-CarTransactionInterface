import npyscreen
import datetime
import cx_Oracle
import os 

class DriverLicenceRegistration(npyscreen.ActionForm):
    def create(self):
        self.licence_no = self.add(npyscreen.TitleText, 
                                            name='Licence no:',
                                            begin_entry_at=20)
        self.nextrely += 1
        self.sin = self.add(npyscreen.TitleText, name='SIN:', 
                                            begin_entry_at=20)
        self.licence_class = self.add(npyscreen.TitleText, 
                                            name='Class:',
                                            begin_entry_at=20)
        self.photo = self.add(npyscreen.TitleFilenameCombo, 
                                            name='Photo:',
                                            begin_entry_at=20)
        self.issuing_date = self.add(npyscreen.TitleDateCombo, 
                                            name='Issuing Date:',
                                            allowClear = True,
                                            begin_entry_at=20)
        self.expiring_date = self.add(npyscreen.TitleDateCombo, 
                                            name='Expiring Date:', 
                                            allowClear=True,
                                            begin_entry_at=20)

        self.button1 = self.add(npyscreen.ButtonPress, name = "Add person")
        self.button1.whenPressed = self.button_press_add_person
        self.owner = self.add(npyscreen.MultiLineEdit, name=':')

    def button_press_add_person(self):
        self.parentApp.switchForm("ADDPERSON")

        # # get a unique licence id number and auto display?
        # # more issues because field is varchar
        # query = "SELECT MAX(licence_no) FROM drive_licence"
        # # increment max to get unique licence_no
        # self.licence_no.value = self.parentApp.db.query({}, query)[0][0]
        
    def validate_forms(self):
        # if licence no is autogenerated don't check here
        # if this changes, check it.
        query = "SELECT COUNT(licence_no) FROM drive_licence WHERE licence_no = :lic"
        if self.parentApp.db.query({'lic':self.licence_no.value.ljust(15, ' ')}, 
            query)[0][0] != 0:
            npyscreen.notify_confirm("Licence number already in use. Choose another.", 
            title="Error", form_color='STANDOUT', wrap=True, wide=False, editw=1)
            return False

        # ensure sin is not left blank
        if self.sin.value == '':
            npyscreen.notify_confirm("Please enter a SIN", 
            title="Error", form_color='STANDOUT', wrap=True, wide=False, editw=1)
            return False

        # ensure sin exists in people table
        query = "SELECT COUNT(sin) FROM people WHERE sin = :sin"
        if self.parentApp.db.query({'sin':self.sin.value.ljust(15, ' ')}, query)[0][0] == 0:
            npyscreen.notify_confirm("Invalid SIN. Person does not exist", 
            title="Error", form_color='STANDOUT', wrap=True, wide=False, editw=1)
            return False

        # ensure sin is not already in the drive_licence table
        query = "SELECT COUNT(sin) FROM drive_licence WHERE sin = :sin"
        if self.parentApp.db.query({'sin':self.sin.value.ljust(15, ' ')}, query)[0][0] != 0:
            npyscreen.notify_confirm("Person with sin: " + self.sin.value + 
            " is already licenced", 
            title="Error", form_color='STANDOUT', wrap=True, wide=False, editw=1)
            return False

        # # ensure class is not empty
        # if self.licence_class.value == '':
        #     npyscreen.notify_confirm("Please enter a licence class", 
        #     title="Error", form_color='STANDOUT', wrap=True, wide=False, editw=1)
        #     return False

        # ensure file path for image is valid
        if self.photo.value:
            if not os.path.isfile(self.photo.value):
                npyscreen.notify_confirm("You must select a valid image path", 
                                        title="Bad image path",
                                        form_color='STANDOUT', wrap=True,
                                        wide=False, editw=1)
                return False 

        """
        I don't know about this, your forcing them to enter dates and they won't even
        know they did. If this is critical in your opinion I think it should be displayed to
        the user prior to entry.

        # CHECK!!
        if self.issuing_date.value is None:
            self.issuing_date.value = datetime.date.today()
        if self.expiring_date.value is None:
            self.expiring_date.value = self.issuing_date.value + datetime.timedelta(days=1826) 
        """

        # make sure we don't try to date format an empty string.
        if self.issuing_date.value:
            self.issuing_date.value = self.issuing_date.value.strftime("%d-%b-%y")
        if self.expiring_date.value:
            self.expiring_date.value = self.expiring_date.value.strftime("%d-%b-%y")

            """
            This probably isn't neccessary.
            if issue_date > end_date: 
                npyscreen.notify_confirm("Issue date must precede expiry date.", 
                title="Error", form_color='STANDOUT', wrap=True, wide=False, editw=1)
                return False
            """ 
        return True

    def on_ok(self):
        # deal with sin entered not being in db
        # if not we need to prompt the user to enter the person
        # into the people db. We will open this form as a popup.
        query = "SELECT COUNT(sin) FROM people WHERE sin = :sin"
        if self.parentApp.db.query({'sin':self.sin.value.\
            ljust(15, ' ')}, query)[0][0] == 0:
            npyscreen.notify_confirm("Invalid SIN. Person does not exist", 
                title="Error", form_color='STANDOUT', 
                wrap=True, wide=False, editw=1)
            
            # prompt to add a new person.
            response = npyscreen.notify_ok_cancel(\
                "Enter a person with this SIN into the database?", 
                title="Error", form_color='STANDOUT', 
                wrap=True, editw=1)

            # if user selected ok forward them to the 
            # add person form.
            if response:
                # set the next form to be the people form
                # if the add person form exits with switchFormPrevious
                # we should end up back here.
                self.parentApp.setNextForm('ADDPERSON')
            else:
                return
            
            return False

        # validate the form.
        if not self.validate_forms():
            self.editing = True
            return

        # attempt to open the image file
        if self.photo.value:
            try:
                image_file = open(self.photo.value, 'rb')
            except IOError as exc:
                error, = exc.args
                npyscreen.notify_confirm(error.message, 
                                                editw=1,
                                                title='Image Load failure')
                self.editing = True
                self.editing = True
                return

        # if we are succesfull in opening, prep image for db entry
        # ensure we have an image first though.
        if self.photo.value:
            image = image_file.read()

        # photo needed to match the name of the variable in the insert stmt.
        # works properly now.
        self.parentApp.db.cursor.setinputsizes(photo=cx_Oracle.BLOB)
        if self.photo.value:
            image_file.close() 
        else:
            # should be null value.
            image = ''

        # prep and send db statement
        insert = """insert into drive_licence (licence_no, 
                                            sin, class, photo,
                                            issuing_date,
                                            expiring_date)
                                            values (:licence_no, :sin,
                                            :class, :photo,
                                            :issuing_date,
                                            :expiring_date)"""

        entry_dict = {'licence_no':str(self.licence_no.value), 
                      'sin':str(self.sin.value),
                      'class':str(self.licence_class.value),
                      'photo':image,
                      'issuing_date':self.issuing_date.value,
                      'expiring_date':self.expiring_date.value}

        error = self.parentApp.db.insert(entry_dict, insert)
        # error handling
        if error:
            # don't return to main menu
            self.editing = True
            # print error to screen
            npyscreen.notify_confirm(str(error), title="Status", 
                form_color='STANDOUT', wrap=True, wide=False, editw=1)
            return

        # if we get here we have a succesfull entry. Notify the user.
        npyscreen.notify_confirm("Success!", title="Status", 
            form_color='STANDOUT', wrap=True, wide=False, editw=1)
        self.licence_no.value = ''
        self.sin.value = ''
        self.licence_class.value = ''
        self.photo.value = ''
        self.issuing_date.value = ''
        self.expiring_date.value = ''

        self.parentApp.switchFormPrevious()
                                                
    def on_cancel(self):
        self.licence_no.value = ''
        self.sin.value = ''
        self.licence_class.value = ''
        self.photo.value = ''
        self.issuing_date.value = ''
        self.expiring_date.value = ''
        self.parentApp.switchForm("MAIN")
